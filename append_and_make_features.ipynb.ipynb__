{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Копия блокнота \"append_and_make_features.ipynb\"\"","provenance":[{"file_id":"1rj0kMRJ7fdYQ8U0p9c6SEW2k8BmV9ccd","timestamp":1644073171667},{"file_id":"1fEJdsb5HkJE5dux7lkMDY6gg2nmatE9i","timestamp":1644040934391}],"collapsed_sections":["n7l39ZzG4U-d","fNkpX_gT4zTb"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"sKWD3Tqs0nze","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644070884499,"user_tz":-420,"elapsed":2692,"user":{"displayName":"Сергей Зинченко","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVBlOMXxExforNSPObEa-lOgqsNplhTW7E30l4=s64","userId":"00737880137640084461"}},"outputId":"708432ce-e727-4827-c916-6d076a164989"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","import os\n","os.chdir('/content/drive/My Drive/metall/')"]},{"cell_type":"code","source":["import numpy as np\n","import openpyxl\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","\n","from IPython.display import Image\n","\n","%matplotlib inline "],"metadata":{"id":"uEwMlFvi0_B2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Let's make parcer-appender "],"metadata":{"id":"kk7Vl5CfMe9v"}},{"cell_type":"code","source":["def append_new_df(new_df,path_to='/content/drive/My Drive/metall/Прогноз металлические заготовки', path_from='/content/drive/My Drive/metall/metall.xlsx'):\n","  '''\n","\n","  1) takes a table of the original format, removes all unnamed columns from it\n","  2) goes through the columns and divides the original table into a bunch of small ones (in the intervals between the date-columns)\n","  3) cleans the resulting mini-tables from empty tails and saves them to the specified location, naming the date-column's name\n","  4) returns a list of the names of the received tables, years of data start\n","\n","  *) order of saving: new data on top. this is important when calling join_interpolate!\n","\n","  '''\n","  data = new_df\n","  tables = []\n","  years = []\n","  current_table = pd.DataFrame()\n","  current_name = ''\n","  current_length = 0\n","  id_table = 0\n","  cols = data.columns\n","  for col in cols:\n","    if 'Unnamed' in col:\n","      data = data.drop([col], axis=1)\n","      continue\n","    if 'Date' in col:\n","      data[col] = pd.to_datetime(data[col], format='%Y-%m-%dT')\n","      if id_table == 0: \n","        current_length = data[col].apply(lambda x: type(x) != type(pd.NaT)).sum()\n","        current_name = col\n","        id_table+=1\n","      else:\n","        df = pd.read_csv('/content/drive/MyDrive/metall/Прогноз металлические заготовки/cloud/tables/'+current_name+'.csv')\n","        df = df.iloc[::-1].append(current_table.iloc[::-1], ignore_index=True)\n","        df.iloc[::-1].to_csv('/content/drive/MyDrive/metall/Прогноз металлические заготовки/cloud/tables/'+current_name+'.csv',index=False)\n","        tables.append('{}'.format(current_name))\n","        years.append(data[current_name].min().year)\n","        current_table = pd.DataFrame()\n","        current_length = data[col].apply(lambda x: type(x) != type(pd.NaT)).sum()\n","        current_name = col\n","        \n","    current_table[col] = data[col].head(current_length)\n","    current_table['year'] = data[current_name].apply(lambda x: x.year)\n","    current_table['month'] = data[current_name].apply(lambda x: x.month)\n","    current_table['day'] = data[current_name].apply(lambda x: x.day)\n","    \n","  tables.append('{}'.format(current_name))\n","  years.append(data[current_name].min().year)\n","  df = pd.read_csv('/content/drive/MyDrive/metall/Прогноз металлические заготовки/cloud/tables/'+current_name+'.csv')\n","  df = df.iloc[::-1].append(current_table.iloc[::-1], ignore_index=True)\n","  df.iloc[::-1].to_csv('/content/drive/MyDrive/metall/Прогноз металлические заготовки/cloud/tables/'+current_name+'.csv',index=False)\n","  return tables, years"],"metadata":{"id":"URXTtxHb6D4P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["new_df = pd.read_excel('/content/drive/My Drive/metall/Прогноз металлические заготовки/source + tries/new_week.xlsx',skiprows=[0,1])\n","tables, years = append_new_df(new_df)\n"],"metadata":{"id":"WhQwAxwL6YSC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## We will process all the daily-tables through resample with various aggregations (by aligning the last week and cutting the ends in advance) and write the updated tables in tables"],"metadata":{"id":"3NAtflOZxOKp"}},{"cell_type":"markdown","source":["### Let's make a list of daily-tables"],"metadata":{"id":"n7l39ZzG4U-d"}},{"cell_type":"code","source":["tables = ['Date',\n"," 'Date.1',\n"," 'Date.2',\n"," 'Date.3',\n"," 'Date.4',\n"," 'Date.5',\n"," 'Date.6',\n"," 'Date.7',\n"," 'Date.8',\n"," 'Date.9',\n"," 'Date.10',\n"," 'Date.11',\n"," 'Date.12',\n"," 'Date.13',\n"," 'Date.14',\n"," 'Date.15',\n"," 'Date.16',\n"," 'Date.17',\n"," 'Date.18',\n"," 'Date.19',\n"," 'Date.20',\n"," 'Date.21',\n"," 'Date.22',\n"," 'Date.23',\n"," 'Date.24',\n"," 'Date.25',\n"," 'Date.26',\n"," 'Date (Reference)',\n"," 'Date.27',\n"," 'Date.28',\n"," 'Date.29',\n"," 'Date.30',\n"," 'Date.31',\n"," 'Date.32',\n"," 'Date.33',\n"," 'Date.34',\n"," 'Date.35',\n"," 'Date.36']"],"metadata":{"id":"Ra1ovSEoIta0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["target = pd.read_csv('/content/drive/MyDrive/metall/Прогноз металлические заготовки/cloud/tables/Date.10.csv')\n","target['Date.10'] = pd.to_datetime(target['Date.10'])\n","\n","\n","per_day = []\n","per_week = []\n","per_month = []\n","per_dekade= [] \n","for table in tables:\n","  df = pd.read_csv('/content/drive/MyDrive/metall/Прогноз металлические заготовки/cloud/tables/'+table+'.csv')\n","  name_col = df.columns[0]\n","  delta = pd.to_datetime(df[name_col][0])-pd.to_datetime(df[name_col][1])\n","  if (delta.days==1):\n","    per_day.append(table)\n","  elif (delta.days==7):\n","    per_week.append(table)\n","  elif (delta.days==30 or delta.days == 31):\n","    per_month.append(table)\n","  else:\n","    per_dekade.append(table)\n"],"metadata":{"id":"ds4wi1YgHNka"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Let's aggregate them. \n"],"metadata":{"id":"fNkpX_gT4zTb"}},{"cell_type":"markdown","source":["The resulting tables are saved in the same place"],"metadata":{"id":"J6Xz0T3q7w42"}},{"cell_type":"code","source":["for table in per_day:\n","    df = pd.read_csv('/content/drive/MyDrive/metall/Прогноз металлические заготовки/cloud/tables/'+table+'.csv')\n","    df[table]=pd.to_datetime(df[table])\n","    df = df[df[table]>=target['Date.10'].min()]\n","    df=df.set_index(table)\n","    cur_df = pd.DataFrame()\n","    for col in df.columns[3:]:\n","      cur_df['mean_w_'+col]=df.resample('7D', origin='end').mean()[col]\n","      cur_df['max_w_'+col]=df.resample('7D',origin='end').max()[col]\n","      cur_df['min_w_'+col]=df.resample('7D',origin='end').min()[col]\n","      cur_df['sum_w_'+col]=df.resample('7D',origin='end').sum()[col]\n","    for col in df.columns[:3]:\n","      cur_df[col]=df.resample('7D',origin='end').mean()[col]\n","    cur_df = cur_df.iloc[::-1]\n","    cur_df.to_csv('/content/drive/MyDrive/metall/Прогноз металлические заготовки/cloud/tables/'+table+'.csv')"],"metadata":{"id":"WuDy7SbU44u7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Let's process the rows in 'housing_starts' and merge all the tables with target. The resulting table are saved as 'main_table.csv'"],"metadata":{"id":"ItDiTrryztjB"}},{"cell_type":"code","source":["def parcer_housing_starts(string):\n","  '''\n","  \n","  processes a string to the float\n","  example: input = 123,456.789, output = 123456.789\n","\n","  '''\n","  if string != string:\n","    return string\n","  res_str = string.replace(',', '') \n","  return float(res_str)"],"metadata":{"id":"Hw9Xzh4KgdH8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def join_interpolate_week(order=3):\n","  '''\n","\n","  Merge all the tables by target-table, interpolating the gaps with a polynomial of degree order\n","  It is important that there is actual data at the top!\n","\n","  Save resulting table as main_table.csv\n","\n","  '''\n","  main_table = pd.read_csv('/content/drive/My Drive/metall/Прогноз металлические заготовки/cloud/tables/Date.10.csv')\n","  main_table['timepoint'] = pd.to_datetime(main_table['Date.10'])\n","  main_table.index = main_table['timepoint']\n","  main_table = main_table.iloc[::-1]\n","  list_ = ['Date.10', 'timepoint', 'year', 'month', 'day']\n","  for name in list_:\n","    if name in main_table.columns:\n","      main_table.drop([name] , axis=1, inplace=True)\n","  if 'Date.10' in tables:\n","    tables.remove('Date.10')\n","  tol = pd.Timedelta('6 day')\n","  for name_table in tables:\n","    table = pd.read_csv('/content/drive/My Drive/metall/Прогноз металлические заготовки/cloud/tables/{}.csv'.format(name_table))\n","    table['timepoint'] = pd.to_datetime(table[name_table])\n","    table = table.iloc[::-1]\n","    table.index = table['timepoint']\n","    list_ = [name_table, 'timepoint', 'year', 'month', 'day']\n","    for name in list_:\n","      if name in table.columns:\n","        table.drop([name] , axis=1, inplace=True)\n","    main_table = pd.merge_asof(left=main_table,\n","                                right=table,\n","                                right_index=True,\n","                                left_index=True,\n","                                direction='nearest',\n","                                tolerance=tol)\n","    \n","  main_table['housing starts'] =main_table['housing starts'].apply(lambda x: parcer_housing_starts(x))\n","  main_table = main_table.interpolate(method='polynomial', order = order)\n","  main_table = main_table.iloc[::-1]\n","  main_table.to_csv('/content/drive/My Drive/metall/Прогноз металлические заготовки/cloud/main_table.csv')\n"],"metadata":{"id":"GRSNwGdgkqDF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["join_interpolate_week()"],"metadata":{"id":"Z42eYyqtUMlK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Let's process main_table:\n"],"metadata":{"id":"hic-c00o6wTu"}},{"cell_type":"markdown","source":["Remove the gaps from the bottom and delete all the columns that could not 'be saved'\n","\n","Resulting table save as data_for_lstm.csv"],"metadata":{"id":"wQINDSLo7X2M"}},{"cell_type":"code","source":["main_table = pd.read_csv('/content/drive/My Drive/metall/Прогноз металлические заготовки/cloud/main_table.csv')\n","len = main_table.shape[0]\n","for id in range(len-3,len):\n","  main_table = main_table.drop([id],axis=0)\n","main_table = main_table.dropna(axis=1)\n","(main_table.iloc[::-1]).to_csv('/content/drive/My Drive/metall/Прогноз металлические заготовки/cloud/data_for_lstm.csv', index = False)\n"],"metadata":{"id":"M51lFICa7Cf0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Let's create other features for the neural network\n","\n","\n","We go through all the generated features and shift them, averaging 1-2-4-8 weeks. Next, we leave only the previously selected features\n","\n"],"metadata":{"id":"rEfkfi1bWMaF"}},{"cell_type":"code","source":["main_table['timepoint'] = pd.to_datetime(main_table['timepoint'])\n","main_table = main_table.iloc[:9,:]\n","table = main_table\n","columns = table.columns[1:]\n","list_ = [1,2,4,8]\n","for shift in list_:\n","  for col in columns:\n","    table['{}-shifted '.format(shift)+col]=table.apply(lambda row: table[\n","                              (table['timepoint']>=(row['timepoint']-pd.Timedelta('{} days'.format(7*shift)))) &\n","                              (table['timepoint'] <= row['timepoint'])\n","                              ][col].mean(),axis=1)"],"metadata":{"id":"-Qjv_GWeWPd7","executionInfo":{"status":"ok","timestamp":1644070924138,"user_tz":-420,"elapsed":1976,"user":{"displayName":"Сергей Зинченко","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjVBlOMXxExforNSPObEa-lOgqsNplhTW7E30l4=s64","userId":"00737880137640084461"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0071a682-f30c-4ec2-d763-9e4f60426e9e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  # This is added back by InteractiveShellApp.init_path()\n"]}]},{"cell_type":"code","source":["sel_features = ['target', \n","                'mean_w_product1, CFR market1',\n","                'mean_w_product1 country1, EXW',\n","                'min_w_product1 country1, EXW', \n","                'max_w_product1, CFR market1', \n","                '1-shifted max_w_product1 country1, EXW', \n","                'max_w_product1 country1, EXW', \n","                '8-shifted Price.1', \n","                '2-shifted Price.2', \n","                'mean_w_Fe 62%, CFR country1', \n","                'Scrap, CIF SEA', \n","                '1-shifted USD/CUR1 (Price)', \n","                'Price.2', \n","                'country3 Industrial Production', \n","                '1-shifted Price.2', \n","                '1-shifted sum_w_Fe 62%, CFR country1', \n","                '2-shifted Purchasing Managers Index - Manufacturing', \n","                '1-shifted Scrap, CIF SEA', \n","                '2-shifted USD/CUR1 (Price)', \n","                '4-shifted USD/CUR5 (Price)', \n","                '1-shifted Purchasing Managers Index - Manufacturing', \n","                '4-shifted USD/CUR2 (Price)', \n","                '2-shifted country3 Industrial Production', \n","                'USD/CUR1 (Price)', \n","                '8-shifted Purchase Price Index', \n","                'PMI', \n","                'min_w_Fe 62%, CFR country1', \n","                'HCC, FOB Aust.1', \n","                '8-shifted housing starts', \n","                '4-shifted Actual', \n","                '4-shifted housing starts, country1', \n","                'Total Exports', \n","                'mean_w_HCC, FOB Aust', \n","                'country4 Business Confidence', \n","                '8-shifted Price', \n","                '2-shifted country4 Business Confidence']"],"metadata":{"id":"RSU_f0ciLiCa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Saving the data for the last week as selected_shifted_data.csv. this is the future input for a neural network"],"metadata":{"id":"SN-U_J3q7J_h"}},{"cell_type":"code","source":["table[sel_features].head(1).to_csv('/content/drive/My Drive/metall/Прогноз металлические заготовки/cloud/for_prediction_nn.csv',index=False)"],"metadata":{"id":"aHZsbvsBtZIC"},"execution_count":null,"outputs":[]}]}